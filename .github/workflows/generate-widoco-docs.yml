name: Generate Widoco Documentation for Multiple Ontologies

on:
  push:
    branches:
      - main  # Run the workflow when changes are pushed to the main branch
    paths:
      - 'Ontology/**/*.ttl'  # Only run the workflow when .ttl files are modified

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Latest version (uses Node 20 automatically)

      - name: Set up Java environment
        uses: actions/setup-java@v3  # Latest version (uses Node 20 automatically)
        with:
          distribution: 'temurin'
          java-version: '11'  # Widoco needs Java 11 or higher

      - name: Download Widoco
        run: |
          wget https://github.com/dgarijo/Widoco/releases/download/v1.4.25/widoco-1.4.25-jar-with-dependencies_JDK-17.jar -O widoco.jar

          - name: Generate HTML documentation for modified ontologies
          run: |
            # Check for modified .ttl files from the latest commit
            changed_files=$(git diff --name-only HEAD^ HEAD | grep '.ttl')
            if [ -z "$changed_files" ]; then
              echo "No .ttl files changed. Skipping documentation generation."
              exit 0
            fi
  
            echo "Generating documentation for the following changed files:"
            echo "$changed_files"
  
            for ont_file in $changed_files; do
              # Extract the ontology name without the file extension
              ont_name=$(basename "$ont_file" .ttl)
  
              # Extract the category subfolder (e.g., Living LLs/Business and Compliance)
              category_folder=$(dirname "$ont_file" | sed 's/Ontologies\///')
  
              # Create an output folder in website-ontologies for each category
              output_folder="Website-Ontology/$category_folder/$ont_name"
  
              # Look for a Widoco-Conf file in the same folder as the ontology file
              conf_file=$(dirname "$ont_file")/Widoco-Conf
  
              echo "Generating documentation for: $ont_file"
              echo "Output folder: $output_folder"
              echo "Using Widoco-Conf: $conf_file (if it exists)"
  
              # Run Widoco, using the config file if it exists
              if [ -f "$conf_file" ]; then
                java -jar widoco.jar -ontFile "$ont_file" -outFolder "$output_folder" -confFile "$conf_file" \
                -rewriteAll -webVowl -oops -includeIndividuals -includeImportedOntologies \
                -htaccess -displayOntologySerializations -uniteSections -createFolder
              else
                java -jar widoco.jar -ontFile "$ont_file" -outFolder "$output_folder" \
                -rewriteAll -webVowl -oops -includeIndividuals -includeImportedOntologies \
                -htaccess -displayOntologySerializations -uniteSections -createFolder
              fi
  
              # List the contents of the generated folder to verify the files are created
              echo "Contents of $output_folder:"
              ls -R "$output_folder"
            done

      - name: Disable Jekyll
        run: |
          # Disable Jekyll by creating an empty .nojekyll file in the output directory
          touch Website-Ontology/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3  # This action deploys to GitHub Pages
        with:
          github_token: ${{ secrets.GH_PAT3 }}
          publish_dir: ./Website-Ontology  # Ensure folder name matches
